services:
  nevera:
    build:
      context: ./MODULO-NEVERA
    container_name: vorak-nevera
    restart: unless-stopped
    env_file:
      # Carga las variables desde un archivo .env en la misma carpeta que este docker-compose.yml
      - ./.env
    environment:
      # --- CONFIGURACIÓN DE DISPOSITIVOS ---
      # Pasa las rutas de las cámaras al script app.py.
      # Establece la zona horaria del contenedor a UTC-5 (Bogotá).
      - TZ=America/Bogota
      # Se pasan las rutas de los dispositivos DENTRO del contenedor.
      # Usamos nombres consistentes (/dev/video0, /dev/video1) que definimos en el mapeo de 'devices'.
      - CAMERA_DEVICES=/dev/video0,/dev/video2
    extra_hosts:
      # Añade una entrada en el /etc/hosts del contenedor para que 'host.docker.internal'
      # apunte a la IP del host. Es necesario para Linux.
      - "host.docker.internal:host-gateway"
    devices:
      # Mapeamos los alias persistentes del host a nombres de dispositivo estándar dentro del contenedor.
      # Host (/dev/cam_nevera_X) -> Contenedor (/dev/videoY)
      - "/dev/ttyUSB0:/dev/ttyUSB0"
      - "/dev/cam_nevera_0:/dev/video0" # Tu cámara física en /dev/video4 será /dev/video0 en el contenedor.
      - "/dev/cam_nevera_1:/dev/video2" # Tu cámara física en /dev/video2 será /dev/video1 en el contenedor.
    volumes:
      # --- Mapeo de Volúmenes de Datos ---
      # Volúmenes para persistir datos importantes del módulo nevera entre reinicios.
      - nevera_offline_queue:/app/offline_queue
      - nevera_review_queue:/app/review_queue
      - nevera_logs:/app/logs
      - nevera_db:/app/db
      - fridge_status:/app/status # Volumen compartido para la comunicación con el kiosko.
    group_add:
      # Añade el contenedor a los grupos 'video' y 'dialout' para asegurar permisos.
      - "video"
      - "dialout"


  kiosko:
    build:
      context: .
      dockerfile: ./MODULO-KIOSKO/Dockerfile
      # Pasa el UID y GID del usuario actual del host al Dockerfile
      # para crear un usuario con los mismos permisos.
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    container_name: vorak-kiosko
    # --- AJUSTES PARA COMPATIBILIDAD GRÁFICA AVANZADA ---
    network_mode: "host" # Comparte la red del host. Esencial para que el contenedor encuentre el DISPLAY en localhost.
    ipc: host # Comparte el espacio de nombres IPC. Ayuda a la comunicación entre Chromium y el sistema de ventanas.
    restart: unless-stopped
    # --- CONFIGURACIÓN PARA INTERFAZ GRÁFICA ---
    # Es necesario compartir el socket X11 del host y la variable de entorno DISPLAY
    # para que el contenedor pueda "dibujar" en la pantalla del host.
    env_file:
      - ./.env
    environment:
      # Solo definimos las variables que NO están en el archivo .env, como DISPLAY.
      - DISPLAY=${DISPLAY}
      # Forzamos el paso de la URL del backend para asegurar que llegue al contenedor.
      # Establece la zona horaria del contenedor a UTC-5 (Bogotá).
      - TZ=America/Bogota
      - BASE_BACKEND_URL=${BASE_BACKEND_URL}
      # Pasamos la ruta al archivo de autorización X11 dentro del contenedor.
      - XAUTHORITY=/home/kiosk/.Xauthority
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      # Montamos el archivo de autorización del usuario actual del host en el contenedor.
      - ${XAUTHORITY:-$HOME/.Xauthority}:/home/kiosk/.Xauthority:ro
      # Monta el volumen compartido en modo 'solo lectura' (ro).
      # El kiosko solo necesita leer el estado, no modificarlo.
      - fridge_status:/app/status:ro
      # Volumen para persistir la caché de medios y la playlist del kiosko.
      - kiosk_data:/app/data
volumes:
  nevera_offline_queue:
  nevera_review_queue:
  nevera_logs:
  nevera_db:
  fridge_status:
  kiosk_data: