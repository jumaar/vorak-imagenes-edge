# .github/workflows/build-develop.yml

name: CI/CD - Build Develop

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build and Push (develop)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [nevera, kiosko, prometheus, promtail]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/vorak-imagenes-edge/${{ matrix.service }}
          tags: type=sha,format=short
      - name: Set build paths based on service
        id: paths
        run: |
          SERVICE_NAME=${{ matrix.service }}
          if [ "$SERVICE_NAME" = "nevera" ]; then echo "build_context=." >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-NEVERA/Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "kiosko" ]; then echo "build_context=." >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-KIOSKO/Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "prometheus" ]; then echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-MONITORING/prometheus.Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "promtail" ]; then echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-MONITORING/promtail.Dockerfile" >> $GITHUB_OUTPUT;
          fi
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.paths.outputs.build_context }}
          file: ${{ steps.paths.outputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}