# .github/workflows/release-production.yml

name: CI/CD - Release to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  # =================================================================================
  # JOB 1: Construye y publica imágenes para Producción (etiquetadas con Git Tag)
  # =================================================================================
  build-and-push-production:
    name: Build and Push (Production)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [nevera, kiosko, prometheus, promtail]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/vorak-imagenes-edge/${{ matrix.service }}
          tags: type=ref,event=tag
      - name: Set build paths based on service
        id: paths
        run: |
          SERVICE_NAME=${{ matrix.service }}
          if [ "$SERVICE_NAME" = "nevera" ]; then echo "build_context=." >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-NEVERA/Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "kiosko" ]; then echo "build_context=." >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-KIOSKO/Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "prometheus" ]; then echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-MONITORING/prometheus.Dockerfile" >> $GITHUB_OUTPUT;
          elif [ "$SERVICE_NAME" = "promtail" ]; then echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT && echo "dockerfile_path=./MODULO-MONITORING/promtail.Dockerfile" >> $GITHUB_OUTPUT;
          fi
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.paths.outputs.build_context }}
          file: ${{ steps.paths.outputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # =================================================================================
  # JOB 2: Prepara la matriz de despliegue a partir del inventario
  # =================================================================================
  prepare-deployment-matrix:
    name: Prepare Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.set-matrix.outputs.hosts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Create matrix from inventory
        id: set-matrix
        run: echo "hosts=$(jq -c '.devices' .github/workflows/fleet-inventory.json)" >> $GITHUB_OUTPUT

  # =================================================================================
  # JOB 3: Despliega en la flota de dispositivos IoT de forma secuencial
  # =================================================================================
  deploy-to-production:
    name: Deploy to Production Fleet
    needs: [build-and-push-production, prepare-deployment-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.prepare-deployment-matrix.outputs.hosts) }}
      max-parallel: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Deploy to ${{ matrix.host }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ matrix.host }}
          username: ${{ secrets.IOT_USERNAME }}
          key: ${{ secrets.IOT_PRIVATE_KEY }}
          script: |
            echo "--- Iniciando despliegue en ${{ matrix.host }} con tag ${{ github.ref_name }} ---"
            cd /home/${{ secrets.IOT_USERNAME }}/vorak-imagenes-edge
            export IMAGE_TAG=${{ github.ref_name }}
            ./deploy.sh
            echo "--- Despliegue completado en ${{ matrix.host }} ---"