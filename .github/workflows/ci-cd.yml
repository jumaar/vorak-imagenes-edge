# .github/workflows/ci-cd.yml

name: CI/CD - Build and Deploy with Docker Compose

# Se activa con cada push a la rama 'main'
on:
  push:
    branches:
      - main

# Define variables de entorno para todo el workflow
env:
  # Reemplaza con tu usuario/organizaci√≥n de GitHub y el nombre del repo
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  # ===============================================================
  # JOB 1: Construye y publica las im√°genes de los servicios
  # ===============================================================
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permiso para escribir en GitHub Packages (ghcr.io)
      actions: write # Permiso para escribir en la cach√© de GitHub Actions

    strategy:
      # Ejecuta un trabajo para cada servicio en paralelo
      matrix:
        # --- ¬°CORRECCI√ìN! --- A√±adimos los 4 servicios que necesitan una imagen personalizada.
        service: [nevera, kiosko, prometheus, promtail]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/vorak-imagenes-edge/${{ matrix.service }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=,suffix=,format=short

      - name: Set build paths based on service
        id: paths
        run: |
          # --- ¬°CORRECCI√ìN! ---
          # Definimos tanto el CONTEXTO de construcci√≥n como la RUTA al Dockerfile para cada servicio.
          # Esto asegura que el pipeline replique la misma l√≥gica que docker-compose.yml.
          SERVICE_NAME=${{ matrix.service }}
          if [ "$SERVICE_NAME" = "nevera" ]; then
            echo "build_context=." >> $GITHUB_OUTPUT
            echo "dockerfile_path=./MODULO-NEVERA/Dockerfile" >> $GITHUB_OUTPUT
          elif [ "$SERVICE_NAME" = "kiosko" ]; then
            echo "build_context=." >> $GITHUB_OUTPUT
            echo "dockerfile_path=./MODULO-KIOSKO/Dockerfile" >> $GITHUB_OUTPUT
          elif [ "$SERVICE_NAME" = "prometheus" ]; then
            echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT
            echo "dockerfile_path=./MODULO-MONITORING/prometheus.Dockerfile" >> $GITHUB_OUTPUT
          elif [ "$SERVICE_NAME" = "promtail" ]; then
            echo "build_context=./MODULO-MONITORING" >> $GITHUB_OUTPUT
            echo "dockerfile_path=./MODULO-MONITORING/promtail.Dockerfile" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.paths.outputs.build_context }}
          file: ${{ steps.paths.outputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  # ===============================================================
  # JOB 2: Despliega la aplicaci√≥n usando el webhook
  # ===============================================================
  deploy:
    name: Deploy via Webhook
    runs-on: ubuntu-latest
    needs: build-and-push # Se ejecuta solo si el job anterior fue exitoso

    steps:
      - name: Trigger Redeployment via Kiosk Webhook
        run: |
          echo "üöÄ Triggering redeployment..."
          # Hacemos la petici√≥n y guardamos el c√≥digo de estado HTTP y la salida.
          # -f: Falla si el c√≥digo de estado es >= 400.
          # -s: Modo silencioso (no muestra barra de progreso).
          # -S: Muestra errores si -s est√° activado.
          # -w "%{http_code}": Escribe el c√≥digo de estado en stdout.
          # --output response.txt: Guarda el cuerpo de la respuesta en un archivo.
          HTTP_STATUS=$(curl -f -sS -w "%{http_code}" \
            -X POST "https://nevera1.lenstextil.com/update/${{ secrets.FRIDGE_SECRET }}" \
            --output response.txt)

          echo "üìÑ Server response:"
          cat response.txt

          # Verificamos si el c√≥digo de estado es el esperado (202).
          if [ "$HTTP_STATUS" -eq 202 ]; then
            echo "‚úÖ Deployment successfully triggered (HTTP $HTTP_STATUS)."
          else
            echo "‚ùå Deployment trigger failed with HTTP status $HTTP_STATUS."
            exit 1
          fi
