version: '3.8'

# Este stack despliega la aplicación principal (nevera y kiosko).
# Lee variables no sensibles del archivo .env en la máquina del manager.

networks:
  vorak-net:
    external: true # Asume que la red ya fue creada con 'docker network create'

secrets:
  fridge_secret:
    external: true # Asume que el secreto ya fue creado con 'docker secret create'

volumes:
  nevera_db:
  nevera_offline_queue:
  nevera_review_queue:
  kiosk_data:
  fridge_status:
  backup_data:

services:
  nevera:
    # IMPORTANTE: Esta es una imagen privada. Asegúrate de haber ejecutado 'docker login ghcr.io' en el nodo.
    # Para actualizaciones, reemplaza la etiqueta por el nuevo hash de commit y redespliega el stack.
    # El uso de 'latest' puede generar advertencias de 'digest', es seguro en un solo nodo pero se recomienda usar etiquetas inmutables (ej: 8d4c856) en producción.
    image: ghcr.io/jumaar/vorak-imagenes-edge/nevera:latest
    environment:
      - FRIDGE_ID=${FRIDGE_ID}
      - BASE_BACKEND_URL=${BASE_BACKEND_URL}
      - CAMERA_DEVICES=/dev/video0,/dev/video2
      # Los GIDs se leen desde el entorno del host, donde deben ser exportados
      # antes de ejecutar 'docker stack deploy'.
      - VIDEO_GID=${VIDEO_GID}
      - DIALOUT_GID=${DIALOUT_GID}
      - BAUD_RATE=115200
    volumes:
      - nevera_db:/app/db
      - nevera_offline_queue:/app/offline_queue
      - nevera_review_queue:/app/review_queue
      - fridge_status:/app/status
    devices:
      - "/dev/video0:/dev/video0"
      - "/dev/video2:/dev/video2"
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    networks:
      - vorak-net
    secrets:
      - source: fridge_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    # --- ¡CORRECCIÓN DE PERMISOS AVANZADA! ---
    # Le damos al contenedor privilegios elevados para asegurar el acceso al hardware.
    # Esto es a menudo necesario para dispositivos como cámaras o puertos serie en Swarm.
    privileged: true

  backup:
    image: alpine:latest # Esta imagen pública es correcta
    command: >
      /bin/sh -c "
        chmod +x /backup/backup.sh && \
        echo 'Contenedor de backup iniciado. El primer backup se ejecutará en 1 minuto...';
        sleep 60;
        while true; do
          /backup/backup.sh;
          echo 'Backup completado. Próxima ejecución en 24 horas.';
          sleep 86400;
        done
      "
    volumes:
      # En Swarm, es mejor usar 'configs' para scripts, pero un bind mount funciona si el script está en el nodo.
      # Asumimos que el repositorio está clonado en el nodo manager.
      - ./MODULO-BACKUP/backup.sh:/backup/backup.sh
      - nevera_offline_queue:/backups/source/offline_queue:ro
      - nevera_review_queue:/backups/source/review_queue:ro
      - backup_data:/backups/destination
    networks:
      - vorak-net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] # Es buena práctica ejecutar tareas de backup en el manager

  kiosko:
    # IMPORTANTE: Esta es una imagen privada.
    # Para actualizaciones, reemplaza la etiqueta por el nuevo hash de commit y redespliega el stack.
    # El uso de 'latest' puede generar advertencias de 'digest', es seguro en un solo nodo pero se recomienda usar etiquetas inmutables (ej: 8d4c856) en producción.
    image: ghcr.io/jumaar/vorak-imagenes-edge/kiosko:latest
    ports:
      # Usamos el modo 'host' para enlazar el puerto directamente a la IP del host,
      # evitando problemas con el routing mesh de Swarm en despliegues de un solo nodo.
      - target: 5000
        published: 5000
        protocol: tcp
        mode: host
      # --- ¡NUEVO! Expone el puerto para el webhook en modo host ---
      - target: 9091
        published: 9091
        protocol: tcp
        mode: host
    environment:
      - FRIDGE_ID=${FRIDGE_ID}
      - BASE_BACKEND_URL=${BASE_BACKEND_URL}
      # --- ¡NUEVO! Variables para que el webhook pueda autenticarse en GHCR ---
      # Estas variables deben ser exportadas en la terminal antes de desplegar.
      - GHCR_USER=${GHCR_USER}
      - GHCR_TOKEN=${GHCR_TOKEN}
    volumes:
      # --- ¡NUEVO! Permisos para que el kiosko controle Docker y encuentre los archivos ---
      # Monta el socket de Docker para que el script redeploy.sh pueda ejecutar comandos.
      - /var/run/docker.sock:/var/run/docker.sock
      # Monta el directorio del proyecto para que el script encuentre docker-stack.app.yml y .env
      - .:/app/project_root
      - kiosk_data:/app/data
      - fridge_status:/app/status
    networks:
      - vorak-net
    secrets:
      - fridge_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure